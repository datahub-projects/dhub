#!/usr/bin/python3
import os, sys, argparse
from ver_utils import *

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('branch', nargs='?')
parser.add_argument('--name', default="")
parser.add_argument('--debug', action="store_true")
args = parser.parse_args()

print ("ver -- Versioning Easily Remembered")

def update(branch, name="", prompt=True, debug=False):
    if "/" in branch:
        git("clone %s %s" % (branch, name), show=True, debug=debug)
        if name:
            branch = name
        else:
            if branch[-1] == "/":
                branch = branch[:-1]
            j = branch.rfind("/")
            branch = branch[j+1:]
    git("fetch", show=True, debug=debug)  # could be slow -- prompt user?
    curbr = get_branch()
    if branch and (curbr != branch):
        out, err = git("checkout %s" % branch, show=debug, debug=debug)
        if out.find("error: pathspec") == 0:                        # if branch does not exist,
            out, err = git("checkout --track origin/%s" % branch, show=debug, debug=debug)   # create it
            if out.find("fatal: ") == 0:                    # new remote
                if not prompt or input("branch %s does not exist, create?" % branch).lower()[:1] == 'y':
                    print ("creating new branch: & tracking remote: %s" % branch)
                    git("checkout -b {0}".format(branch), show=True, debug=debug)
                    git("branch --set-upstream-to=origin/{0} {0}".format(branch))
                    # git("push -u origin {0}".format(branch), show=True, debug=debug) # done on 'save'
    else:
        branch = curbr

    git("pull", show=True, debug=debug)
    subs = get_subs()
    for sub in subs:
        print ("Processing", sub[0])
        path = os.path.abspath(".")
        os.chdir(sub[0])
        # os.system("pwd")
        update(branch, prompt=False, debug=debug)
        os.chdir(path)
    if subs:
        git("submodule update", show=True, debug=debug)

chdir_root()
print ("Processing root project")
update(args.branch, name=args.name, prompt=True, debug=args.debug)

