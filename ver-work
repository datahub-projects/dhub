#!/usr/bin/python3
import os, sys, argparse
from ver_utils import *

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('remote')
parser.add_argument('--name', default="")
parser.add_argument('--subs', default="")
parser.add_argument('--debug', action="store_true")
args = parser.parse_args()

print ("ver -- Versioning Easily Remembered")
if is_ver_project():
    print ("ERROR -- can't get a new project within an existing one")
    exit()

git("clone %s %s" % (args.remote, args.name), show=True, debug=args.debug)

if args.name:
    branch = args.name
else:
    if args.remote[-1] == "/":
        branch = args.remote[:-1]
    j = branch.rfind("/")
    branch = branch[j+1:]

os.chdir(branch)
f = open(".ver_root", "w")
f.write("This represents the root ver project. Please only have one in the path!")
f.close()

path = os.path.abspath(".")
subs = args.subs.split(",")
for sub, commit in get_subs():
    if sub in subs:
        print ("including: ", sub)
        os.chdir(sub)
        git("submodule update --init .", show=args.debug, debug=args.debug)
        git("checkout master", show=args.debug, debug=args.debug)
    else:
        print ("ignoring:  ", sub)
    os.chdir(path)

# cmd = ["ver-update", "--yes"]
# if args.debug:
#     cmd.append("--debug")
# if args.debug:
#     print(cmd)
# run(cmd, showoutput=True)